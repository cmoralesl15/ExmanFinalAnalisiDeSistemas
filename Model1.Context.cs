//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SistemasUmg
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AnalisisDBCesarEntities : DbContext
    {
        public AnalisisDBCesarEntities()
            : base("name=AnalisisDBCesarEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Articulo> Articulo { get; set; }
        public virtual DbSet<Categoria> Categoria { get; set; }
        public virtual DbSet<Comprobante> Comprobante { get; set; }
        public virtual DbSet<DetalleIngreso> DetalleIngreso { get; set; }
        public virtual DbSet<DetalleVenta> DetalleVenta { get; set; }
        public virtual DbSet<Documento> Documento { get; set; }
        public virtual DbSet<EstadoIngreso> EstadoIngreso { get; set; }
        public virtual DbSet<EstadoVenta> EstadoVenta { get; set; }
        public virtual DbSet<Ingreso> Ingreso { get; set; }
        public virtual DbSet<Persona> Persona { get; set; }
        public virtual DbSet<Rol> Rol { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<TipoComprobante> TipoComprobante { get; set; }
        public virtual DbSet<TipoDocumento> TipoDocumento { get; set; }
        public virtual DbSet<TipoPersona> TipoPersona { get; set; }
        public virtual DbSet<Usuario> Usuario { get; set; }
        public virtual DbSet<Venta> Venta { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_delete_articulo(Nullable<int> idArticulo)
        {
            var idArticuloParameter = idArticulo.HasValue ?
                new ObjectParameter("idArticulo", idArticulo) :
                new ObjectParameter("idArticulo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_delete_articulo", idArticuloParameter);
        }
    
        public virtual int sp_delete_categoria(Nullable<int> idCategoria)
        {
            var idCategoriaParameter = idCategoria.HasValue ?
                new ObjectParameter("idCategoria", idCategoria) :
                new ObjectParameter("idCategoria", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_delete_categoria", idCategoriaParameter);
        }
    
        public virtual int sp_delete_rol(Nullable<int> idRol)
        {
            var idRolParameter = idRol.HasValue ?
                new ObjectParameter("idRol", idRol) :
                new ObjectParameter("idRol", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_delete_rol", idRolParameter);
        }
    
        public virtual int sp_delete_usuario(Nullable<int> idUsuario)
        {
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("idUsuario", idUsuario) :
                new ObjectParameter("idUsuario", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_delete_usuario", idUsuarioParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_insert_articulo(Nullable<int> idCategoria, string codigo, string nombre, Nullable<decimal> precioVenta, Nullable<int> stock, string descripcion, Nullable<bool> condicion)
        {
            var idCategoriaParameter = idCategoria.HasValue ?
                new ObjectParameter("idCategoria", idCategoria) :
                new ObjectParameter("idCategoria", typeof(int));
    
            var codigoParameter = codigo != null ?
                new ObjectParameter("codigo", codigo) :
                new ObjectParameter("codigo", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var precioVentaParameter = precioVenta.HasValue ?
                new ObjectParameter("precioVenta", precioVenta) :
                new ObjectParameter("precioVenta", typeof(decimal));
    
            var stockParameter = stock.HasValue ?
                new ObjectParameter("stock", stock) :
                new ObjectParameter("stock", typeof(int));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("descripcion", descripcion) :
                new ObjectParameter("descripcion", typeof(string));
    
            var condicionParameter = condicion.HasValue ?
                new ObjectParameter("condicion", condicion) :
                new ObjectParameter("condicion", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insert_articulo", idCategoriaParameter, codigoParameter, nombreParameter, precioVentaParameter, stockParameter, descripcionParameter, condicionParameter);
        }
    
        public virtual int sp_insert_categoria(string nombre, string descripcion, Nullable<bool> condicion)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("descripcion", descripcion) :
                new ObjectParameter("descripcion", typeof(string));
    
            var condicionParameter = condicion.HasValue ?
                new ObjectParameter("condicion", condicion) :
                new ObjectParameter("condicion", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insert_categoria", nombreParameter, descripcionParameter, condicionParameter);
        }
    
        public virtual int sp_insert_detalleIngreso(Nullable<int> idIngreso, Nullable<int> idArticulo, Nullable<int> cantidad, Nullable<decimal> precioDetalle)
        {
            var idIngresoParameter = idIngreso.HasValue ?
                new ObjectParameter("idIngreso", idIngreso) :
                new ObjectParameter("idIngreso", typeof(int));
    
            var idArticuloParameter = idArticulo.HasValue ?
                new ObjectParameter("idArticulo", idArticulo) :
                new ObjectParameter("idArticulo", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            var precioDetalleParameter = precioDetalle.HasValue ?
                new ObjectParameter("precioDetalle", precioDetalle) :
                new ObjectParameter("precioDetalle", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insert_detalleIngreso", idIngresoParameter, idArticuloParameter, cantidadParameter, precioDetalleParameter);
        }
    
        public virtual int sp_insert_detalleVenta(Nullable<int> idVenta, Nullable<int> idArticulo, Nullable<int> cantidad, Nullable<decimal> precioDetalleVenta, Nullable<decimal> descuento)
        {
            var idVentaParameter = idVenta.HasValue ?
                new ObjectParameter("idVenta", idVenta) :
                new ObjectParameter("idVenta", typeof(int));
    
            var idArticuloParameter = idArticulo.HasValue ?
                new ObjectParameter("idArticulo", idArticulo) :
                new ObjectParameter("idArticulo", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            var precioDetalleVentaParameter = precioDetalleVenta.HasValue ?
                new ObjectParameter("precioDetalleVenta", precioDetalleVenta) :
                new ObjectParameter("precioDetalleVenta", typeof(decimal));
    
            var descuentoParameter = descuento.HasValue ?
                new ObjectParameter("descuento", descuento) :
                new ObjectParameter("descuento", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insert_detalleVenta", idVentaParameter, idArticuloParameter, cantidadParameter, precioDetalleVentaParameter, descuentoParameter);
        }
    
        public virtual int sp_insert_ingreso(Nullable<int> idProveedor, Nullable<int> idUsuario, string tipoComprobante, string serieComprobante, string numComprobante, Nullable<System.DateTime> fechaHora, Nullable<decimal> impuesto, Nullable<decimal> total, string estado)
        {
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("idProveedor", idProveedor) :
                new ObjectParameter("idProveedor", typeof(int));
    
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("idUsuario", idUsuario) :
                new ObjectParameter("idUsuario", typeof(int));
    
            var tipoComprobanteParameter = tipoComprobante != null ?
                new ObjectParameter("tipoComprobante", tipoComprobante) :
                new ObjectParameter("tipoComprobante", typeof(string));
    
            var serieComprobanteParameter = serieComprobante != null ?
                new ObjectParameter("serieComprobante", serieComprobante) :
                new ObjectParameter("serieComprobante", typeof(string));
    
            var numComprobanteParameter = numComprobante != null ?
                new ObjectParameter("numComprobante", numComprobante) :
                new ObjectParameter("numComprobante", typeof(string));
    
            var fechaHoraParameter = fechaHora.HasValue ?
                new ObjectParameter("fechaHora", fechaHora) :
                new ObjectParameter("fechaHora", typeof(System.DateTime));
    
            var impuestoParameter = impuesto.HasValue ?
                new ObjectParameter("impuesto", impuesto) :
                new ObjectParameter("impuesto", typeof(decimal));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("total", total) :
                new ObjectParameter("total", typeof(decimal));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insert_ingreso", idProveedorParameter, idUsuarioParameter, tipoComprobanteParameter, serieComprobanteParameter, numComprobanteParameter, fechaHoraParameter, impuestoParameter, totalParameter, estadoParameter);
        }
    
        public virtual int sp_insert_persona(string tipoPersona, string nombre, string tipoDocumento, string numDocumento, string direccion, string telefono, string email)
        {
            var tipoPersonaParameter = tipoPersona != null ?
                new ObjectParameter("tipoPersona", tipoPersona) :
                new ObjectParameter("tipoPersona", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var tipoDocumentoParameter = tipoDocumento != null ?
                new ObjectParameter("tipoDocumento", tipoDocumento) :
                new ObjectParameter("tipoDocumento", typeof(string));
    
            var numDocumentoParameter = numDocumento != null ?
                new ObjectParameter("numDocumento", numDocumento) :
                new ObjectParameter("numDocumento", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insert_persona", tipoPersonaParameter, nombreParameter, tipoDocumentoParameter, numDocumentoParameter, direccionParameter, telefonoParameter, emailParameter);
        }
    
        public virtual int sp_insert_rol(string nombre, string descripcion, Nullable<bool> condicion)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("descripcion", descripcion) :
                new ObjectParameter("descripcion", typeof(string));
    
            var condicionParameter = condicion.HasValue ?
                new ObjectParameter("condicion", condicion) :
                new ObjectParameter("condicion", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insert_rol", nombreParameter, descripcionParameter, condicionParameter);
        }
    
        public virtual int sp_insert_usuario(Nullable<int> idRol, string nombre, string tipoDocumento, string numDocumento, string direccion, string telefono, string email, byte[] passwordHash, byte[] passwordSal, Nullable<bool> condicion)
        {
            var idRolParameter = idRol.HasValue ?
                new ObjectParameter("idRol", idRol) :
                new ObjectParameter("idRol", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var tipoDocumentoParameter = tipoDocumento != null ?
                new ObjectParameter("tipoDocumento", tipoDocumento) :
                new ObjectParameter("tipoDocumento", typeof(string));
    
            var numDocumentoParameter = numDocumento != null ?
                new ObjectParameter("numDocumento", numDocumento) :
                new ObjectParameter("numDocumento", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var passwordHashParameter = passwordHash != null ?
                new ObjectParameter("passwordHash", passwordHash) :
                new ObjectParameter("passwordHash", typeof(byte[]));
    
            var passwordSalParameter = passwordSal != null ?
                new ObjectParameter("passwordSal", passwordSal) :
                new ObjectParameter("passwordSal", typeof(byte[]));
    
            var condicionParameter = condicion.HasValue ?
                new ObjectParameter("condicion", condicion) :
                new ObjectParameter("condicion", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insert_usuario", idRolParameter, nombreParameter, tipoDocumentoParameter, numDocumentoParameter, direccionParameter, telefonoParameter, emailParameter, passwordHashParameter, passwordSalParameter, condicionParameter);
        }
    
        public virtual int sp_insert_venta(Nullable<int> idCliente, Nullable<int> idUsuario, string tipoComprobante, string serieComprobante, string numComprobante, Nullable<System.DateTime> fechaHora, Nullable<decimal> impuesto, Nullable<decimal> total, string estado)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("idCliente", idCliente) :
                new ObjectParameter("idCliente", typeof(int));
    
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("idUsuario", idUsuario) :
                new ObjectParameter("idUsuario", typeof(int));
    
            var tipoComprobanteParameter = tipoComprobante != null ?
                new ObjectParameter("tipoComprobante", tipoComprobante) :
                new ObjectParameter("tipoComprobante", typeof(string));
    
            var serieComprobanteParameter = serieComprobante != null ?
                new ObjectParameter("serieComprobante", serieComprobante) :
                new ObjectParameter("serieComprobante", typeof(string));
    
            var numComprobanteParameter = numComprobante != null ?
                new ObjectParameter("numComprobante", numComprobante) :
                new ObjectParameter("numComprobante", typeof(string));
    
            var fechaHoraParameter = fechaHora.HasValue ?
                new ObjectParameter("fechaHora", fechaHora) :
                new ObjectParameter("fechaHora", typeof(System.DateTime));
    
            var impuestoParameter = impuesto.HasValue ?
                new ObjectParameter("impuesto", impuesto) :
                new ObjectParameter("impuesto", typeof(decimal));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("total", total) :
                new ObjectParameter("total", typeof(decimal));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insert_venta", idClienteParameter, idUsuarioParameter, tipoComprobanteParameter, serieComprobanteParameter, numComprobanteParameter, fechaHoraParameter, impuestoParameter, totalParameter, estadoParameter);
        }
    
        public virtual int sp_read_articulo(Nullable<int> idArticulo)
        {
            var idArticuloParameter = idArticulo.HasValue ?
                new ObjectParameter("idArticulo", idArticulo) :
                new ObjectParameter("idArticulo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_read_articulo", idArticuloParameter);
        }
    
        public virtual int sp_read_categoria(Nullable<int> idcategoria)
        {
            var idcategoriaParameter = idcategoria.HasValue ?
                new ObjectParameter("idcategoria", idcategoria) :
                new ObjectParameter("idcategoria", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_read_categoria", idcategoriaParameter);
        }
    
        public virtual int sp_read_detalleIngreso(Nullable<int> idDetalleIngreso)
        {
            var idDetalleIngresoParameter = idDetalleIngreso.HasValue ?
                new ObjectParameter("idDetalleIngreso", idDetalleIngreso) :
                new ObjectParameter("idDetalleIngreso", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_read_detalleIngreso", idDetalleIngresoParameter);
        }
    
        public virtual int sp_read_detalleVenta(Nullable<int> idDetalleVenta)
        {
            var idDetalleVentaParameter = idDetalleVenta.HasValue ?
                new ObjectParameter("idDetalleVenta", idDetalleVenta) :
                new ObjectParameter("idDetalleVenta", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_read_detalleVenta", idDetalleVentaParameter);
        }
    
        public virtual int sp_read_ingreso(Nullable<int> idIngreso)
        {
            var idIngresoParameter = idIngreso.HasValue ?
                new ObjectParameter("idIngreso", idIngreso) :
                new ObjectParameter("idIngreso", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_read_ingreso", idIngresoParameter);
        }
    
        public virtual int sp_read_persona(Nullable<int> idPersona)
        {
            var idPersonaParameter = idPersona.HasValue ?
                new ObjectParameter("idPersona", idPersona) :
                new ObjectParameter("idPersona", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_read_persona", idPersonaParameter);
        }
    
        public virtual int sp_read_rol(Nullable<int> idRol)
        {
            var idRolParameter = idRol.HasValue ?
                new ObjectParameter("idRol", idRol) :
                new ObjectParameter("idRol", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_read_rol", idRolParameter);
        }
    
        public virtual int sp_read_usuario(Nullable<int> idUsuario)
        {
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("idUsuario", idUsuario) :
                new ObjectParameter("idUsuario", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_read_usuario", idUsuarioParameter);
        }
    
        public virtual int sp_read_venta(Nullable<int> idVenta)
        {
            var idVentaParameter = idVenta.HasValue ?
                new ObjectParameter("idVenta", idVenta) :
                new ObjectParameter("idVenta", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_read_venta", idVentaParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_update_articulo(Nullable<int> idArticulo, Nullable<int> idCategoria, string codigo, string nombre, Nullable<decimal> precioVenta, Nullable<int> stock, string descripcion, Nullable<bool> condicion)
        {
            var idArticuloParameter = idArticulo.HasValue ?
                new ObjectParameter("idArticulo", idArticulo) :
                new ObjectParameter("idArticulo", typeof(int));
    
            var idCategoriaParameter = idCategoria.HasValue ?
                new ObjectParameter("idCategoria", idCategoria) :
                new ObjectParameter("idCategoria", typeof(int));
    
            var codigoParameter = codigo != null ?
                new ObjectParameter("codigo", codigo) :
                new ObjectParameter("codigo", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var precioVentaParameter = precioVenta.HasValue ?
                new ObjectParameter("precioVenta", precioVenta) :
                new ObjectParameter("precioVenta", typeof(decimal));
    
            var stockParameter = stock.HasValue ?
                new ObjectParameter("stock", stock) :
                new ObjectParameter("stock", typeof(int));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("descripcion", descripcion) :
                new ObjectParameter("descripcion", typeof(string));
    
            var condicionParameter = condicion.HasValue ?
                new ObjectParameter("condicion", condicion) :
                new ObjectParameter("condicion", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_update_articulo", idArticuloParameter, idCategoriaParameter, codigoParameter, nombreParameter, precioVentaParameter, stockParameter, descripcionParameter, condicionParameter);
        }
    
        public virtual int sp_update_categoria(Nullable<int> idCategoria, string nombre, string descripcion, Nullable<bool> condicion)
        {
            var idCategoriaParameter = idCategoria.HasValue ?
                new ObjectParameter("idCategoria", idCategoria) :
                new ObjectParameter("idCategoria", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("descripcion", descripcion) :
                new ObjectParameter("descripcion", typeof(string));
    
            var condicionParameter = condicion.HasValue ?
                new ObjectParameter("condicion", condicion) :
                new ObjectParameter("condicion", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_update_categoria", idCategoriaParameter, nombreParameter, descripcionParameter, condicionParameter);
        }
    
        public virtual int sp_update_detalleIngreso(Nullable<int> idDetalleIngreso, Nullable<int> idIngreso, Nullable<int> idArticulo, Nullable<int> cantidad, Nullable<decimal> precioDetalle)
        {
            var idDetalleIngresoParameter = idDetalleIngreso.HasValue ?
                new ObjectParameter("idDetalleIngreso", idDetalleIngreso) :
                new ObjectParameter("idDetalleIngreso", typeof(int));
    
            var idIngresoParameter = idIngreso.HasValue ?
                new ObjectParameter("idIngreso", idIngreso) :
                new ObjectParameter("idIngreso", typeof(int));
    
            var idArticuloParameter = idArticulo.HasValue ?
                new ObjectParameter("idArticulo", idArticulo) :
                new ObjectParameter("idArticulo", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            var precioDetalleParameter = precioDetalle.HasValue ?
                new ObjectParameter("precioDetalle", precioDetalle) :
                new ObjectParameter("precioDetalle", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_update_detalleIngreso", idDetalleIngresoParameter, idIngresoParameter, idArticuloParameter, cantidadParameter, precioDetalleParameter);
        }
    
        public virtual int sp_update_detalleVenta(Nullable<int> idDetalleVenta, Nullable<int> idVenta, Nullable<int> idArticulo, Nullable<int> cantidad, Nullable<decimal> precioDetalleVenta, Nullable<decimal> descuento)
        {
            var idDetalleVentaParameter = idDetalleVenta.HasValue ?
                new ObjectParameter("idDetalleVenta", idDetalleVenta) :
                new ObjectParameter("idDetalleVenta", typeof(int));
    
            var idVentaParameter = idVenta.HasValue ?
                new ObjectParameter("idVenta", idVenta) :
                new ObjectParameter("idVenta", typeof(int));
    
            var idArticuloParameter = idArticulo.HasValue ?
                new ObjectParameter("idArticulo", idArticulo) :
                new ObjectParameter("idArticulo", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            var precioDetalleVentaParameter = precioDetalleVenta.HasValue ?
                new ObjectParameter("precioDetalleVenta", precioDetalleVenta) :
                new ObjectParameter("precioDetalleVenta", typeof(decimal));
    
            var descuentoParameter = descuento.HasValue ?
                new ObjectParameter("descuento", descuento) :
                new ObjectParameter("descuento", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_update_detalleVenta", idDetalleVentaParameter, idVentaParameter, idArticuloParameter, cantidadParameter, precioDetalleVentaParameter, descuentoParameter);
        }
    
        public virtual int sp_update_ingreso(Nullable<int> idIngreso, Nullable<int> idProveedor, Nullable<int> idUsuario, string tipoComprobante, string serieComprobante, string numComprobante, Nullable<System.DateTime> fechaHora, Nullable<decimal> impuesto, Nullable<decimal> total, string estado)
        {
            var idIngresoParameter = idIngreso.HasValue ?
                new ObjectParameter("idIngreso", idIngreso) :
                new ObjectParameter("idIngreso", typeof(int));
    
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("idProveedor", idProveedor) :
                new ObjectParameter("idProveedor", typeof(int));
    
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("idUsuario", idUsuario) :
                new ObjectParameter("idUsuario", typeof(int));
    
            var tipoComprobanteParameter = tipoComprobante != null ?
                new ObjectParameter("tipoComprobante", tipoComprobante) :
                new ObjectParameter("tipoComprobante", typeof(string));
    
            var serieComprobanteParameter = serieComprobante != null ?
                new ObjectParameter("serieComprobante", serieComprobante) :
                new ObjectParameter("serieComprobante", typeof(string));
    
            var numComprobanteParameter = numComprobante != null ?
                new ObjectParameter("numComprobante", numComprobante) :
                new ObjectParameter("numComprobante", typeof(string));
    
            var fechaHoraParameter = fechaHora.HasValue ?
                new ObjectParameter("fechaHora", fechaHora) :
                new ObjectParameter("fechaHora", typeof(System.DateTime));
    
            var impuestoParameter = impuesto.HasValue ?
                new ObjectParameter("impuesto", impuesto) :
                new ObjectParameter("impuesto", typeof(decimal));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("total", total) :
                new ObjectParameter("total", typeof(decimal));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_update_ingreso", idIngresoParameter, idProveedorParameter, idUsuarioParameter, tipoComprobanteParameter, serieComprobanteParameter, numComprobanteParameter, fechaHoraParameter, impuestoParameter, totalParameter, estadoParameter);
        }
    
        public virtual int sp_update_persona(Nullable<int> idPersona, string tipoPersona, string nombre, string tipoDocumento, string numDocumento, string direccion, string telefono, string email)
        {
            var idPersonaParameter = idPersona.HasValue ?
                new ObjectParameter("idPersona", idPersona) :
                new ObjectParameter("idPersona", typeof(int));
    
            var tipoPersonaParameter = tipoPersona != null ?
                new ObjectParameter("tipoPersona", tipoPersona) :
                new ObjectParameter("tipoPersona", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var tipoDocumentoParameter = tipoDocumento != null ?
                new ObjectParameter("tipoDocumento", tipoDocumento) :
                new ObjectParameter("tipoDocumento", typeof(string));
    
            var numDocumentoParameter = numDocumento != null ?
                new ObjectParameter("numDocumento", numDocumento) :
                new ObjectParameter("numDocumento", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_update_persona", idPersonaParameter, tipoPersonaParameter, nombreParameter, tipoDocumentoParameter, numDocumentoParameter, direccionParameter, telefonoParameter, emailParameter);
        }
    
        public virtual int sp_update_rol(Nullable<int> idRol, string nombre, string descripcion, Nullable<bool> condicion)
        {
            var idRolParameter = idRol.HasValue ?
                new ObjectParameter("idRol", idRol) :
                new ObjectParameter("idRol", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("descripcion", descripcion) :
                new ObjectParameter("descripcion", typeof(string));
    
            var condicionParameter = condicion.HasValue ?
                new ObjectParameter("condicion", condicion) :
                new ObjectParameter("condicion", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_update_rol", idRolParameter, nombreParameter, descripcionParameter, condicionParameter);
        }
    
        public virtual int sp_update_usuario(Nullable<int> idUsuario, Nullable<int> idRol, string nombre, string tipoDocumento, string numDocumento, string direccion, string telefono, string email, byte[] passwordHash, byte[] passwordSal, Nullable<bool> condicion)
        {
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("idUsuario", idUsuario) :
                new ObjectParameter("idUsuario", typeof(int));
    
            var idRolParameter = idRol.HasValue ?
                new ObjectParameter("idRol", idRol) :
                new ObjectParameter("idRol", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var tipoDocumentoParameter = tipoDocumento != null ?
                new ObjectParameter("tipoDocumento", tipoDocumento) :
                new ObjectParameter("tipoDocumento", typeof(string));
    
            var numDocumentoParameter = numDocumento != null ?
                new ObjectParameter("numDocumento", numDocumento) :
                new ObjectParameter("numDocumento", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var passwordHashParameter = passwordHash != null ?
                new ObjectParameter("passwordHash", passwordHash) :
                new ObjectParameter("passwordHash", typeof(byte[]));
    
            var passwordSalParameter = passwordSal != null ?
                new ObjectParameter("passwordSal", passwordSal) :
                new ObjectParameter("passwordSal", typeof(byte[]));
    
            var condicionParameter = condicion.HasValue ?
                new ObjectParameter("condicion", condicion) :
                new ObjectParameter("condicion", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_update_usuario", idUsuarioParameter, idRolParameter, nombreParameter, tipoDocumentoParameter, numDocumentoParameter, direccionParameter, telefonoParameter, emailParameter, passwordHashParameter, passwordSalParameter, condicionParameter);
        }
    
        public virtual int sp_update_venta(Nullable<int> idVenta, Nullable<int> idCliente, Nullable<int> idUsuario, string tipoComprobante, string serieComprobante, string numComprobante, Nullable<System.DateTime> fechaHora, Nullable<decimal> impuesto, Nullable<decimal> total, string estado)
        {
            var idVentaParameter = idVenta.HasValue ?
                new ObjectParameter("idVenta", idVenta) :
                new ObjectParameter("idVenta", typeof(int));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("idCliente", idCliente) :
                new ObjectParameter("idCliente", typeof(int));
    
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("idUsuario", idUsuario) :
                new ObjectParameter("idUsuario", typeof(int));
    
            var tipoComprobanteParameter = tipoComprobante != null ?
                new ObjectParameter("tipoComprobante", tipoComprobante) :
                new ObjectParameter("tipoComprobante", typeof(string));
    
            var serieComprobanteParameter = serieComprobante != null ?
                new ObjectParameter("serieComprobante", serieComprobante) :
                new ObjectParameter("serieComprobante", typeof(string));
    
            var numComprobanteParameter = numComprobante != null ?
                new ObjectParameter("numComprobante", numComprobante) :
                new ObjectParameter("numComprobante", typeof(string));
    
            var fechaHoraParameter = fechaHora.HasValue ?
                new ObjectParameter("fechaHora", fechaHora) :
                new ObjectParameter("fechaHora", typeof(System.DateTime));
    
            var impuestoParameter = impuesto.HasValue ?
                new ObjectParameter("impuesto", impuesto) :
                new ObjectParameter("impuesto", typeof(decimal));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("total", total) :
                new ObjectParameter("total", typeof(decimal));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_update_venta", idVentaParameter, idClienteParameter, idUsuarioParameter, tipoComprobanteParameter, serieComprobanteParameter, numComprobanteParameter, fechaHoraParameter, impuestoParameter, totalParameter, estadoParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
